package EightQueen;

public class EightQueen {


    //定义一个max表示共有多少个皇后
    private int max = 8;
    //定义数组array, 保存皇后位置的结果, 比如arr = {0, 4, 7, 5, 3, 6, 1, 3}
    private int[] arr = new int[max];
    private static int count = 0;
 
    public static void main(String[] args) {
        //测试
        Queue8 queue8 = new Queue8();
        queue8.check(0);
        System.out.printf("总共有%d种解法",count);
    }
 
    //编写一个方法, 放置第n个皇后
    //特别注意, check 是每一次递归时, 进入到check中都有for (int i = 0; i < max; i++), 因此会有回溯
    private void check(int n) {
        if (n == max) {
            print();
            return;
        }
        //依次放入皇后, 并判断是否冲突
        for (int i = 0; i < max; i++) {
            //先把当前这个皇后n, 放到当前行的第1列
            arr[n] = i;
            //判断当放置第n个皇后到i列时, 是否冲突
            if (judge(n)) {
                //接着放n+1个皇后, 开始递归
                check(n + 1);
            }
        }
    }
 
 
 
    //查看当我们放置第n个皇后, 就去监测该皇后是否和前面已经摆放的皇后的冲突
    private boolean judge(int n) {
        for (int i = 0; i < n; i++) {
            //判断第n个皇后和第i个皇后是否在同一个斜线
            if (arr[i] == arr[n] || Math.abs(n - i) == Math.abs(arr[n] - arr[i])) {
                return false;
            }
        }
        return true;
    }
 
 
    //写一个方法, 可以将皇后当前的位置输出
    private void print(){
        count++;
        for (int i = 0; i < arr.length; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }


}
